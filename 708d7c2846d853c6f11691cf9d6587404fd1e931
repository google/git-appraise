{"timestamp":"1453990916","author":"jishi9","description":"I noticed that the submit command will fail silently (exit status 1, but no error message) if the config key `appraise.submit` doesn't exist or was set to a bad value (other than \"merge\" or \"rebase\"). I arrived at this state by running these commands on a branch:\r\n```\r\ngit appraise request\r\ngit appraise comment -lgtm\r\ngit appraise submit \r\n```\r\n\r\nI think the reason no error message is being displayed is because `git config` doesn't display an error message for a missing config key.\r\n\r\nWe will need to check the exit code of `git config`; according to the docs, an exit code of 1 for `git config` means \"the section or key is invalid\".\r\n\r\nWe also need to check that that the retrieved config value is one of 'merge' or 'rebase'"}

{"timestamp":"1453991486","author":"jishi9","description":"That's interesting.. you can't properly get the exit code :(\r\nhttp://stackoverflow.com/questions/10385551/get-exit-code-go"}

{"timestamp":"1453991486","author":"jishi9","description":"That's interesting.. mixed opinions on whether you can get the exit code :(\r\nhttp://stackoverflow.com/questions/10385551/get-exit-code-go"}

{"timestamp":"1453996517","author":"hazbo","description":"I came up with something like this, so instead of:\r\n\r\n```\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\treturn repo.runGitCommand(\"config\", \"appraise.submit\")\r\n}\r\n```\r\n\r\nwould this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work:\r\n\r\n```\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\tmergeStrategy, err := repo.runGitCommand(\"config\", \"appraise.submit\")\r\n\tif err != nil \u0026\u0026 mergeStrategy == \"\" {\r\n\t\treturn \"\", nil\r\n\t} else if err != nil {\r\n\t\treturn mergeStrategy, err\r\n\t}\r\n\treturn mergeStrategy, nil\r\n}\r\n```\r\n\r\nThoughts?"}

{"timestamp":"1453996517","author":"hazbo","description":"I came up with something like this, so instead of:\r\n\r\n```go\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\treturn repo.runGitCommand(\"config\", \"appraise.submit\")\r\n}\r\n```\r\n\r\nwould this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work:\r\n\r\n```go\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\tmergeStrategy, err := repo.runGitCommand(\"config\", \"appraise.submit\")\r\n\tif err != nil \u0026\u0026 mergeStrategy == \"\" {\r\n\t\treturn \"\", nil\r\n\t} else if err != nil {\r\n\t\treturn mergeStrategy, err\r\n\t}\r\n\treturn mergeStrategy, nil\r\n}\r\n```\r\n\r\nThoughts?"}

{"timestamp":"1453996857","author":"hazbo","description":"The reason I'd suggest ignoring the error (providing it comes with an empty string in this case) is that I'd assume we'd still want to to just fall back to the default (merge in this case) if the user has not specified via git config what this will be."}

{"timestamp":"1453998871","author":"jishi9","description":"\u003e would this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work\r\n\r\nI think that would work, though I'm concerned that we're treating all errors arising from the `git config` command as meaning \"the key doesn't exist\". `man git-config` lists a surprising number of possible exit codes :)\r\n\r\n        This command will fail with non-zero status upon error. Some exit codes are:\r\n         1. The config file is invalid (ret=3),\r\n         2. can not write to the config file (ret=4),\r\n         3. no section or name was provided (ret=2),\r\n         4. the section or key is invalid (ret=1),\r\n         5. you try to unset an option which does not exist (ret=5),\r\n         6. you try to unset/set an option for which multiple lines match (ret=5), or\r\n         7. you try to use an invalid regexp (ret=6).\r\n        On success, the command returns the exit code 0.\r\n\r\n\r\n\u003e I'd assume we'd still want to to just fall back to the default (merge in this case) if the user has not specified via git config what this will be\r\n\r\nThat makes sense. I'm thinking of writing a `getGitConfig` function that allows for an 'optional' return type, or maybe a default value.\r\n\r\nSee also my pull request #37 , if you patch that change in your branch and try the `submit` command then a clearer error message is displayed."}

{"timestamp":"1453999564","author":"hazbo","description":"I agree, I think a `getGitConfig` abstraction is a good idea, as we currently use this to get the email, text editor and (hopefully soon) the merge strategy (which may actually be better named, submit strategy).\r\n\r\nThis way we're in a safer position for all counts of `git config` being ran. I'll merge your patch into my branch and give this a quick test."}

{"timestamp":"1453999868","author":"googlebot","description":"We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n\n\u003c!-- need_author_consent --\u003e"}

{"timestamp":"1454009569","author":"ojarjur@google.com","location":{"commit":"b62fbba842a7c4b751c37cf640885029103da297","path":"commands/submit.go","range":{"startLine":93}},"description":"This should only be done if the user has not set one of the command line flags.\n\nFor instance, if you run `git appraise submit --rebase`, and your config has\nset `appraise.submit=merge` then the --rebase flag should take precendence.\n\nIn fact, I think the tool shouldn't even try to look at the config values if\nany of the flags have been set to true.\n\nSo, we should wrap this chunk of code in an if block along the lines of:\n\n```go\n\tif !(*submitRebase || *submitMerge) {\n\t\tmergeStrategy, _ := repo.GetMergeStrategy()\n\t\tif mergeStrategy == \"merge\" {\n\t\t\t*submitMerge = true\n\t\t}\n\t\tif mergeStrategy == \"rebase\" {\n\t\t\t*submitRebase = true\n\t\t}\n\t}\n```\n"}
