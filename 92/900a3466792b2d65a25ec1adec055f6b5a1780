{"timestamp":"1547418369","author":"googlebot","description":"\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit \u003chttps://cla.developers.google.com/\u003e to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u003c!-- need_sender_cla --\u003e"}

{"timestamp":"1547418376","author":"llorens","description":"Hi,\r\nI just recently stumbled upon git-appraise and it immediately seemed a brilliant idea to me. I can imagine I could use it e.g. for one-on-one collaboration/tutoring for junior members of my team, but...\r\nThe junior members usually have little experience with git and so I would like to work a bit on the usability of git-appraise before I give it a shot.\r\nOne of the areas where I think git-appraise could be improved is output coloring. I put together some code to add colors to the different states a code review can be in. Could you have a look before I invest more time in supporting other places? This is the first time I've been writing go and the language still feels very awkward to me, so I'll be grateful for any comments!\r\nThanks!"}

{"timestamp":"1547500498","author":"ojarjur","description":"@llorens Thanks for taking this on!\r\n\r\nI hope git-appraise does work for your use case, and if you hit any issues, please let us know.\r\n\r\nWe do need a signed CLA before we can accept any of your changes, though.\r\n\r\nThe comment from \"googlebot\" above gives the URL you would need to go to in order to sign it.\r\n\r\nThanks."}

{"timestamp":"1547502660","author":"llorens","description":"OK, just signed the CLA."}

{"timestamp":"1547502663","author":"googlebot","description":"CLAs look good, thanks!\n\n\u003c!-- ok --\u003e"}

{"timestamp":"1547517407","author":"ojarjur","location":{"commit":"92900a3466792b2d65a25ec1adec055f6b5a1780","path":"repository/repo.go","range":{"startLine":223}},"description":"These two new methods need comments explaining what they do.\r\n\r\nAdditionally, these should probably go up with the rest of the config-fetching methods. I.E. just below the `GetSubmitStrategy` entry.\r\n\r\nAdditionally, they should return a tuple including an error, so that we can propagate outwards any errors in invoking the `git` command line tool\r\n\r\ne.g. `GetColorBool(name string) (bool, error)` and `GetColor(name, defaultValue string) (string, error)`"}

{"timestamp":"1547517451","author":"ojarjur","location":{"commit":"92900a3466792b2d65a25ec1adec055f6b5a1780","path":"repository/repo.go","range":{"startLine":224}},"description":"We use camel case for variables instead of snake case.\r\n\r\ni.e. `defaultValue` rather than `default_value`"}

{"timestamp":"1547518725","author":"ojarjur","location":{"commit":"92900a3466792b2d65a25ec1adec055f6b5a1780","path":"commands/output/output.go","range":{"startLine":92}},"description":"The `review.Summary` type holds a reference to the repo, so you don't have to pass it in here. Instead, you can just reference `r.Repo`.\r\n\r\nConversely, adding in the additional reference to the repo would be a change to an exported UI, which might break people using git-appraise as a library.\r\n\r\nOne additional aside; the `repository.Repo` type is an interface, so you would not normally pass it around as a pointer (but that will become a moot point after the switch to using `r.Repo`)."}

{"timestamp":"1547519365","author":"ojarjur","location":{"commit":"92900a3466792b2d65a25ec1adec055f6b5a1780","path":"commands/output/output.go","range":{"startLine":101}},"description":"We try to reduce the amount of nesting for code blocks by short-circuiting when possible.\r\n\r\nIn this case, we can check `if !useColor` right here, and then return `fmt.Printf(reviewSummaryTemplate, statusString, r.Revision, indentedDescription)`.\r\n\r\ni.e.\r\n\r\n```go\r\n\tif !useColor {\r\n\t\tfmt.Printf(reviewSummaryTemplate, statusString, r.Revision, indentedDescription)\r\n\t\treturn\r\n\t}\r\n```"}

{"timestamp":"1547519664","author":"ojarjur","location":{"commit":"92900a3466792b2d65a25ec1adec055f6b5a1780","path":"repository/git.go","range":{"startLine":999}},"description":"In this case I would recommend building the command args first, appending to them if the default is provided, and then only having one line that invokes the command.\r\n\r\ne.g.\r\n\r\n```go\r\n\targs := []string{\"config\", \"--type=color\", \"-z\"}\r\n\tif defaultValue != \"\" {\r\n\t\targs = append(args, \"--default\", defaultValue)\r\n\t}\r\n\targs = append(args, \"--get\", name)\r\n\tres, err := repo.runGitCommand(args...)\r\n```"}

{"timestamp":"1547679220","author":"llorens","location":{"commit":"da84096691df278ef70de92403300c88a08e48ee","path":"repository/git.go","range":{"startLine":992}},"description":"I don't think it makes sense for this function to return (bool, error) as opposed to bool only, but I understand from your comment that this is a convention so I oblige."}

{"timestamp":"1547680116","author":"ojarjur","location":{"commit":"da84096691df278ef70de92403300c88a08e48ee","path":"commands/output/output.go","range":{"startLine":57}},"description":"this should be \"defaultColor\" rather than \"default_color\" (i.e. we use mixed case rather than underscores)"}

{"timestamp":"1547680615","author":"ojarjur","location":{"commit":"da84096691df278ef70de92403300c88a08e48ee","path":"commands/output/output.go","range":{"startLine":91}},"description":"Let's call this \"getColorStatusString\"."}
