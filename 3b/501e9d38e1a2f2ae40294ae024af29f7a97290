{"timestamp":"1464959709","reviewRef":"refs/pull/57/head","targetRef":"refs/heads/master","requester":"hazbo","description":"Accepting -F flag on git-appraise comments\n\nI've gathered a few thoughts in regards to #56 in the form of this commit. This\r\ncurrently doesn't take in to account stdin (-), just a file name.\r\n\r\nBasically, the user has 3 choices as this point:\r\n\r\n  - 1 git appraise comment -m \"nice code!\" HASH\r\n  - 2 git appraise comment HASH\r\n  - 3 git appraise comment -F message HASH\r\n\r\nGiven that 'message' is the file name that contains the message. As for the\r\nstdin, keeping that similar to git would be a good idea. They present the user\r\nwith the following output and then read:\r\n\r\n```\r\nif (isatty(0))\r\n    fprintf(stderr, _(\"(reading log message from standard input)\\n\"));\r\nread_from_stdin(\u0026log);\r\n```\r\n\r\nThis would be consistent and imo seems like it could work well. I agree with\r\n@ojarjur in that this should be supported with accept, comment, reject\r\nand request. This commit only takes into account, comment. Once that's nailed\r\ndown, applying it to the rest would be trivial.","baseCommit":"9f8a28c281d7373833fc339c2a1e400428c97ea7"}

{"timestamp":"1465041177","reviewRef":"refs/pull/58/head","targetRef":"refs/heads/master","requester":"hazbo","description":"Allowing stdin in the case of comment -F\n\nAs mentioned in #56, passing - for stdin with -F will now read. This is\r\npartially inspired by how git approaches this issue. Here are a couple of\r\nexamples of how comments can be made as of this commit:\r\n\r\n```\r\necho 'hello!' | git appraise comment -F - HASH\r\n\r\ngit appraise comment -F - HASH\r\n(reading log message from standard input)\r\nhello!\r\n```\r\n\r\n(ctrl+D to exit from the attached version)\r\nFeedback / thoughts would be appreciated! :)","baseCommit":"5fa018c056c16dd53e8a66dac0ed9d1e0d6839b4"}

{"timestamp":"1464990437","reviewRef":"refs/pull/57/head","targetRef":"refs/heads/master","requester":"hazbo","description":"Accepting -F flag on git-appraise comments\n\nI've gathered a few thoughts in regards to #56 in the form of this commit. This\r\ncurrently doesn't take in to account stdin (-), just a file name.\r\n\r\nBasically, the user has 3 choices as this point:\r\n\r\n  - 1 git appraise comment -m \"nice code!\" HASH\r\n  - 2 git appraise comment HASH\r\n  - 3 git appraise comment -F message HASH\r\n\r\nGiven that 'message' is the file name that contains the message. As for the\r\nstdin, keeping that similar to git would be a good idea. They present the user\r\nwith the following output and then read:\r\n\r\n```\r\nif (isatty(0))\r\n    fprintf(stderr, _(\"(reading log message from standard input)\\n\"));\r\nread_from_stdin(\u0026log);\r\n```\r\n\r\nThis would be consistent and imo seems like it could work well. I agree with\r\n@ojarjur in that this should be supported with accept, comment, reject\r\nand request. This commit only takes into account, comment. Once that's nailed\r\ndown, applying it to the rest would be trivial.","baseCommit":"9f8a28c281d7373833fc339c2a1e400428c97ea7"}

{"timestamp":"1465041308","reviewRef":"refs/pull/57/head","targetRef":"refs/heads/master","requester":"hazbo","description":"Accepting -F flag on git-appraise comments\n\nI've gathered a few thoughts in regards to #56 in the form of this commit. This\r\ncurrently doesn't take in to account stdin (-), just a file name.\r\n\r\nBasically, the user has 3 choices as this point:\r\n\r\n  - 1 git appraise comment -m \"nice code!\" HASH\r\n  - 2 git appraise comment HASH\r\n  - 3 git appraise comment -F message HASH\r\n\r\nGiven that 'message' is the file name that contains the message. As for the\r\nstdin, keeping that similar to git would be a good idea. They present the user\r\nwith the following output and then read:\r\n\r\n```\r\nif (isatty(0))\r\n    fprintf(stderr, _(\"(reading log message from standard input)\\n\"));\r\nread_from_stdin(\u0026log);\r\n```\r\n\r\nThis would be consistent and imo seems like it could work well. I agree with\r\n@ojarjur in that this should be supported with accept, comment, reject\r\nand request. This commit only takes into account, comment. Once that's nailed\r\ndown, applying it to the rest would be trivial.","baseCommit":"9f8a28c281d7373833fc339c2a1e400428c97ea7"}

{"timestamp":"1465041415","reviewRef":"refs/pull/58/head","targetRef":"refs/heads/master","requester":"hazbo","description":"Allowing stdin in the case of comment -F\n\nAs mentioned in #56, passing - for stdin with -F will now read. This is\r\npartially inspired by how git approaches this issue. Here are a couple of\r\nexamples of how comments can be made as of this commit:\r\n\r\n```\r\necho 'hello!' | git appraise comment -F - HASH\r\n\r\ngit appraise comment -F - HASH\r\n(reading comment from standard input)\r\nhello!\r\n```\r\n\r\n(ctrl+D to exit from the attached version)\r\nFeedback / thoughts would be appreciated! :)","baseCommit":"5fa018c056c16dd53e8a66dac0ed9d1e0d6839b4"}

{"timestamp":"1465232801","reviewRef":"refs/pull/57/head","targetRef":"refs/heads/master","requester":"hazbo","description":"Accepting -F flag on git-appraise comments\n\nI've gathered a few thoughts in regards to #56 in the form of this commit. This\r\ncurrently doesn't take in to account stdin (-), just a file name.\r\n\r\nBasically, the user has 3 choices as this point:\r\n\r\n  - 1 git appraise comment -m \"nice code!\" HASH\r\n  - 2 git appraise comment HASH\r\n  - 3 git appraise comment -F message HASH\r\n\r\nGiven that 'message' is the file name that contains the message. As for the\r\nstdin, keeping that similar to git would be a good idea. They present the user\r\nwith the following output and then read:\r\n\r\n```\r\nif (isatty(0))\r\n    fprintf(stderr, _(\"(reading log message from standard input)\\n\"));\r\nread_from_stdin(\u0026log);\r\n```\r\n\r\nThis would be consistent and imo seems like it could work well. I agree with\r\n@ojarjur in that this should be supported with accept, comment, reject\r\nand request. This commit only takes into account, comment. Once that's nailed\r\ndown, applying it to the rest would be trivial.","baseCommit":"9f8a28c281d7373833fc339c2a1e400428c97ea7"}
