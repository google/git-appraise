{"timestamp":"1459985188","reviewRef":"refs/pull/49/head","targetRef":"refs/heads/master","requester":"ojarjur","description":"Two substantial performance improvements for listing reviews:\n\n1. Add a `GetAllNotes` method to the Repo interface. This reads the\r\n   contents for all git-notes under the given ref in a single batch\r\n   operation. This is faster than the old method because we only\r\n   shell out to the git command a fixed number of times rather than\r\n   doing so repeatedely for every single review.\r\n2. When checking each review to see if it has been submitted, cache\r\n   the set of commits reachable from each target ref, and use that\r\n   for determining submitted status. This saves us from having to\r\n   reperform the (linear) scan of the git history for every review.\r\n\r\nWith these changes, listing the reviews for the git-appraise repo\r\ndrops from taking ~2 seconds to ~0.15 seconds.\r\n\r\nFor one particular test repo, with 15k reviews, this drops the list\r\nlatency from 48 minutes to 6 seconds.","baseCommit":"92f2c5e028b426e93a8b8ef88e67b664bca6e1c4"}

{"timestamp":"1463693208","reviewRef":"refs/pull/49/head","targetRef":"refs/heads/master","requester":"ojarjur","description":"Two substantial performance improvements for listing reviews:\n\n1. Add a `GetAllNotes` method to the Repo interface. This reads the\r\n   contents for all git-notes under the given ref in a single batch\r\n   operation. This is faster than the old method because we only\r\n   shell out to the git command a fixed number of times rather than\r\n   doing so repeatedely for every single review.\r\n2. When checking each review to see if it has been submitted, cache\r\n   the set of commits reachable from each target ref, and use that\r\n   for determining submitted status. This saves us from having to\r\n   reperform the (linear) scan of the git history for every review.\r\n\r\nWith these changes, listing the reviews for the git-appraise repo\r\ndrops from taking ~2 seconds to ~0.15 seconds.\r\n\r\nFor one particular test repo, with 15k reviews, this drops the list\r\nlatency from 48 minutes to 6 seconds.","baseCommit":"299a6746ed3b8f0501588a01b75d9b04bf5f5116"}

{"timestamp":"1464986180","reviewRef":"refs/pull/49/head","targetRef":"refs/heads/master","requester":"ojarjur","description":"Two substantial performance improvements for listing reviews:\n\n1. Add a `GetAllNotes` method to the Repo interface. This reads the\r\n   contents for all git-notes under the given ref in a single batch\r\n   operation. This is faster than the old method because we only\r\n   shell out to the git command a fixed number of times rather than\r\n   doing so repeatedely for every single review.\r\n2. When checking each review to see if it has been submitted, cache\r\n   the set of commits reachable from each target ref, and use that\r\n   for determining submitted status. This saves us from having to\r\n   reperform the (linear) scan of the git history for every review.\r\n\r\nWith these changes, listing the reviews for the git-appraise repo\r\ndrops from taking ~2 seconds to ~0.15 seconds.\r\n\r\nFor one particular test repo, with 15k reviews, this drops the list\r\nlatency from 48 minutes to 6 seconds.","baseCommit":"5fa018c056c16dd53e8a66dac0ed9d1e0d6839b4"}

{"timestamp":"1465521633","reviewRef":"refs/pull/49/head","targetRef":"refs/heads/master","requester":"ojarjur","description":"Two substantial performance improvements for listing reviews:\n\n1. Add a `GetAllNotes` method to the Repo interface. This reads the\r\n   contents for all git-notes under the given ref in a single batch\r\n   operation. This is faster than the old method because we only\r\n   shell out to the git command a fixed number of times rather than\r\n   doing so repeatedely for every single review.\r\n2. When checking each review to see if it has been submitted, cache\r\n   the set of commits reachable from each target ref, and use that\r\n   for determining submitted status. This saves us from having to\r\n   reperform the (linear) scan of the git history for every review.\r\n\r\nWith these changes, listing the reviews for the git-appraise repo\r\ndrops from taking ~2 seconds to ~0.15 seconds.\r\n\r\nFor one particular test repo, with 15k reviews, this drops the list\r\nlatency from 48 minutes to 6 seconds.","baseCommit":"c90767294e54001ab1c046816574655e39b3014f"}

{"timestamp":"1465601827","reviewRef":"refs/pull/49/head","targetRef":"refs/heads/master","requester":"ojarjur","description":"Two substantial performance improvements for listing reviews:\n\n1. Add a `GetAllNotes` method to the Repo interface. This reads the\r\n   contents for all git-notes under the given ref in a single batch\r\n   operation. This is faster than the old method because we only\r\n   shell out to the git command a fixed number of times rather than\r\n   doing so repeatedely for every single review.\r\n2. When checking each review to see if it has been submitted, cache\r\n   the set of commits reachable from each target ref, and use that\r\n   for determining submitted status. This saves us from having to\r\n   reperform the (linear) scan of the git history for every review.\r\n\r\nWith these changes, listing the reviews for the git-appraise repo\r\ndrops from taking ~2 seconds to ~0.15 seconds.\r\n\r\nFor one particular test repo, with 15k reviews, this drops the list\r\nlatency from 48 minutes to 6 seconds.","baseCommit":"e2ab65be2bf4459a9924095048d228adc4fe099a"}
