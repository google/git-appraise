{"timestamp":"1453990916","author":"jishi9","description":"I noticed that the submit command will fail silently (exit status 1, but no error message) if the config key `appraise.submit` doesn't exist or was set to a bad value (other than \"merge\" or \"rebase\"). I arrived at this state by running these commands on a branch:\r\n```\r\ngit appraise request\r\ngit appraise comment -lgtm\r\ngit appraise submit \r\n```\r\n\r\nI think the reason no error message is being displayed is because `git config` doesn't display an error message for a missing config key.\r\n\r\nWe will need to check the exit code of `git config`; according to the docs, an exit code of 1 for `git config` means \"the section or key is invalid\".\r\n\r\nWe also need to check that that the retrieved config value is one of 'merge' or 'rebase'"}

{"timestamp":"1453991486","author":"jishi9","description":"That's interesting.. mixed opinions on whether you can get the exit code :(\r\nhttp://stackoverflow.com/questions/10385551/get-exit-code-go"}

{"timestamp":"1453996517","author":"hazbo","description":"I came up with something like this, so instead of:\r\n\r\n```go\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\treturn repo.runGitCommand(\"config\", \"appraise.submit\")\r\n}\r\n```\r\n\r\nwould this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work:\r\n\r\n```go\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\tmergeStrategy, err := repo.runGitCommand(\"config\", \"appraise.submit\")\r\n\tif err != nil \u0026\u0026 mergeStrategy == \"\" {\r\n\t\treturn \"\", nil\r\n\t} else if err != nil {\r\n\t\treturn mergeStrategy, err\r\n\t}\r\n\treturn mergeStrategy, nil\r\n}\r\n```\r\n\r\nThoughts?"}

{"timestamp":"1453996857","author":"hazbo","description":"The reason I'd suggest ignoring the error (providing it comes with an empty string in this case) is that I'd assume we'd still want to to just fall back to the default (merge in this case) if the user has not specified via git config what this will be."}
