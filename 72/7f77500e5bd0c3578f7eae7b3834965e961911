{"timestamp":"1455455932","author":"hazbo","description":"Hey @andreineculau,\r\n\r\nYou raise some interesting points here. I'm sure @ojarjur will be able to respond in more detail but I figured I'd weigh in here.\r\n\r\n\u003e to see no correlation, nor explanation, as to why this is called git-appraise, although we talk about reviews\r\n\r\nYour right, in terms of the docs and the code itself the term review is used, rather than appraise. \r\n\r\n`git-appraise` is simply just the name of the project and also the git command. However I find the words 'review' and 'appraise', under the given context, somewhat synonymous given that to appraise, is to \"assess the value or quality of\", which I find works quite nicely with this project as that is literally  the reason why someone would request a code review. Personally I prefer appraise over review as both the name of the project and the git command - that's just my opinion though ;)\r\n\r\n\u003e submitting vs merging/rebasing\r\n\r\nI'm not sure whether or not by this you mean; \"why would I use `git appraise submit 8cb887077783` as appose to `git merge`?\", or \"why isn't it `git appraise merge 8cb887077783` instead of `submit`?\". Either way they're both perfectly valid questions, so I'll answer both.\r\n\r\n1) `submit` is one subcommand that deals with both closing the code review (changing it from 'accepted'), and the way in which the code is actually merged. So with this subcommand you may use `--merge` or `--rebase` or `--fast-forward`, or you may configure this globally within the scope of your project. By default it will use fast-forward. If you're using `git-appraise` in any meaningful way, the submit command seems to make the most sense.\r\n\r\n2) Git already has merge and rebase subcommands. The focus there is on merging the code. The focus with git-appraise is to close (submit) the review along with the code. So rather than having 3 subcommands to submit the review we just use `submit` and optionally allow the flags at stated above.\r\n\r\nThese are just my opinions on two of the points you brought up. I hope this provides some insight. :)"}
{"timestamp":"1455455932","author":"hazbo","description":"Hey @andreineculau,\r\n\r\nYou raise some interesting points here. I'm sure @ojarjur will be able to respond in more detail but I figured I'd weigh in here.\r\n\r\n\u003e to see no correlation, nor explanation, as to why this is called git-appraise, although we talk about reviews\r\n\r\nYour right, in terms of the docs and the code itself the term review is used, rather than appraise. \r\n\r\n`git-appraise` is simply just the name of the project and also the git command. However I find the words 'review' and 'appraise', under the given context, somewhat synonymous given that to appraise, is to \"assess the value or quality of\", which I find works quite nicely with this project as that is literally  the reason why someone would request a code review. Personally I prefer appraise over review as both the name of the project and the git command - that's just my opinion though ;)\r\n\r\n\u003e submitting vs merging/rebasing\r\n\r\nI'm not sure whether or not by this you mean; \"why would I use `git appraise submit 8cb887077783` as appose to `git merge`\", or why isn't it `git appraise merge 8cb887077783` instead of `submit`. Either way they're both perfectly valid questions, so I'll answer both.\r\n\r\n1) `submit` is one subcommand that deals with both closing the code review (changing it from 'accepted'), and the way in which the code is actually merged. So with this subcommand you may use `--merge` or `--rebase` or `--fast-forward`, or you may configure this globally within the scope of your project. By default it will use fast-forward. If you're using `git-appraise` in any meaningful way, the submit command seems to make the most sense.\r\n\r\n2) Git already has merge and rebase subcommands. The focus there is on merging the code. The focus with git-appraise is to close (submit) the review along with the code. So rather than having 3 subcommands to submit the review we just use `submit` and optionally allow the flags at stated above.\r\n\r\nThese are just my opinions on two of the points you brought up. I hope this provides some insight. :)"}
{"timestamp":"1455456792","author":"andreineculau","description":"thanks @hazbo . I will sprinkle the diff with the questions, for you and @ojarjur, as it provides context e.g. I meant \"why git appraise submit --merge instead of git review merge?\""}
{"timestamp":"1455456876","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":58}},"description":"my suggestions are in line with the builtin `git branch` and `git tag` for instance\r\n\r\nNOTE: should also support the short `-l`"}
{"timestamp":"1455456895","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":66}},"description":"my suggestion is in line with `git log`"}
{"timestamp":"1455457175","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"the goal of a \"pull request\", \"merge request\", \"review\", etc is to be \"merged\" (not necessarily ad-literam with git-merge, but to make its way into the targetRef)\r\n\r\npoint is that the phrase \"submit\" has no equivalent in the git world, but there are merge/rebase equivalents."}
{"timestamp":"1455457239","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":91}},"description":"if this tool is called `git-appraise`, or `git-review` as with my suggestion, then take ownership over the git-appraise/git-review namespace, not `devtools`"}
{"timestamp":"1455457305","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":101}},"description":"if the bucket holds requests, then the namespace should follow"}
{"timestamp":"1455457376","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":206}},"description":"scratch this. this should be the other way around i.e. talk about analyses, not \"robot comments\", and keep to `refs/notes/*/analyses`"}
{"timestamp":"1455457387","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":257}},"description":"if the bucket holds comments, then the namespace should follow"}

{"timestamp":"1455457435","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"docs/tutorial.md","range":{"startLine":67}},"description":"\"Request a review: `git appraise request`\"\r\nvs\r\n\"Request a review: `git review request`\"\r\n"}

{"timestamp":"1455457467","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"docs/tutorial.md","range":{"startLine":97}},"description":"my suggestion is in line with `git log`"}

{"timestamp":"1455457534","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"docs/tutorial.md","range":{"startLine":139}},"description":"scratch this. Should have been\r\n```\r\ngit review [-l | --list]\r\n```"}

{"timestamp":"1455457596","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"docs/tutorial.md","range":{"startLine":266}},"description":"\"Once a review has been accepted, you can merge it with the tool: `git appraise submit --merge 1e6eb14c8014`\"\r\nvs\r\n\"Once a review has been accepted, you can merge it with the tool: `git review merge 1e6eb14c8014`\"\r\n"}

{"timestamp":"1455530926","author":"hazbo","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":58}},"description":"Given that `git branch --list` with no \u0026lt;pattern\u0026gt; supplied is essentially the exact same as `git branch`, and given that you'd like to keep inline with git itself, would you suggest that `git review --list` has an optional \u0026lt;pattern\u0026gt;, and if so what would the pattern be trying to match? Branches and tags can be referenced by something other than a hash. I don't believe a review can."}

{"timestamp":"1455531409","author":"hazbo","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"I think the reason why `submit` doesn't appear in the git world (in this context at least) is because git itself doesn't deal with code reviews where as git-appraise does. Although the code is very much tied to the review itself, it is the review we are submitting and as a result of that the code is then merged.\r\n\r\nIf you think about it just based on the terms alone, \"merging a review\" doesn't really make much sense, where as submitting one does. Again, it's contextual."}

{"timestamp":"1455567534","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":58}},"description":"branchRef"}

{"timestamp":"1455568948","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"\u003e Although the code is very much tied to the review itself, it is the review we are submitting and as a result of that the code is then merged.\r\n\r\nInteresting.\r\n\r\nFor me the code can, and does exist without the \"review\" i.e. comments, analyses, CI reports.\r\nMy end-goal is to merge code, and thanks to `git-appraise`'s functionality, I can also keep/merge the other review contents.\r\n"}

{"timestamp":"1455572337","author":"hazbo","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"\u003e For me the code can, and does exist without the \"review\" i.e. comments, analyses, CI reports.\r\n\r\nI agree with you on this, in that yes it can exist without the review. My end goal is also to merge code. But we can't assume just because someone who has written the code and has requested a review that it is going to get merged. It might never be merged at all in some cases. I guess what I mean by this is, if you're not using git-appraise, you still have branches, you still have tags and you can still review code. For me, git-appraise creates this process where-by code is written, a review is requested, it at this point is either accepted or rejected (if rejected, with feedback), and if it is accepted it is then in a position to be submitted, at which point is is merged. And of course the best thing about it is that it is distributed. So it doesn't matter where any of the remote forks exist. I perhaps didn't explain this very well, sorry if this has been confusing."}

{"timestamp":"1455573606","author":"hazbo","description":"@ojarjur it'd be interesting to hear your take on this PR."}

{"timestamp":"1455572337","author":"hazbo","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"\u003e For me the code can, and does exist without the \"review\" i.e. comments, analyses, CI reports.\r\n\r\nI agree with you on this, in that yes it can exist without the review. My end goal is also to merge code. But we can't assume just because someone who has written the code and has requested a review that it is going to get merged. It might never be merged at all in some cases. I guess what I mean by this is, if you're not using git-appraise, you still have branches, you still have tags and you can still review code. For me, git-appraise creates this process where-by code is written, a review is requested, it at this point is either accepted or rejected (if rejected, with feedback), and if it is accepted it is then in a position to be submitted, at which point it is merged. And of course the best thing about it is that it is distributed. So it doesn't matter where any of the remote forks exist. I perhaps didn't explain this very well, sorry if this has been confusing."}

{"timestamp":"1455595265","author":"ojarjur","description":"@andreineculau, thanks for the feedback and questions.\r\n\r\n@hazbo, thanks for weighing in.\r\n\r\nTo begin with, sorry it took me a while to respond; this was a long weekend for me, so I wasn't at my computer.\r\n\r\nThere's a lot of subtle issues around naming and I need to wait until next week before I can give all these questions the amount of thought they deserve. I'll come back with more in depth responses next week, but I did want to address the 'git-review' issue now:\r\n\r\nI originally did want to name the tool that, but there were multiple other tools already called that, so that name would not work. Using 'git-appraise' instead removes any ambiguity.\r\n\r\nI also thought about calling the reviews 'appraisals' in the docs, but since 'review' is already standard terminology, that would be confusing.\r\n\r\nIn essence, for the docs, widely used terms are better, but for the tool's name uniqueness is better."}

{"timestamp":"1455651612","author":"andreineculau","description":"@ojarjur once again, take it easy :)\r\n\r\n\u003e but since 'review' is already standard terminology, that would be confusing.\r\n\r\nFWIW, while it is standard terminology, it is not a confined concept. Like \"fruit\" is standardized terminology, but both apples and pears fit the box. All in all, I'm more interested in the other suggestions, as `git review` can be a local alias.\r\n\r\n\u003e there were multiple other tools already called that\r\n\r\ncare to name/link them? **next week!** :) Thanks"}

{"timestamp":"1455976668","author":"hazbo","description":"Hi @andreineculau \r\n\r\nI just happened to come across this while reading about [Gerrit](https://www.gerritcodereview.com/), it's the code review system that the Go language itself uses. Apparently this relies on a program called [`git-review`](https://github.com/openstack-infra/git-review).\r\n\r\nInterestingly, while then reading about git-review, I saw this:\r\n\r\n\u003e The upstream project is led by OpenStack. Is not to be confused with the unrelated Facebook project.\r\n\r\nWhich took me to [this](https://github.com/facebookarchive/git-review). It appears this project is no longer worked on / used. Just figured I'd update this thread upon seeing this. :)"}

{"timestamp":"1456169013","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"In this case, the name was chosen a bit haphazardly; I don't think it ever occurred to me to use the names of the existing git concepts for submitting a review. In particular, there are (as @hazbo pointed out) semantic differences between submitting and merging/rebasing/fast-forwarding, so reusing the existing git terminology could cause some confusion.\r\n\r\nA good example for what could cause issues is the \"rebase\" option. I've actually been thinking of adding a \"git appraise rebase\" command that would not submit the review. This would help teams that want to force each review to be a single commit (e.g. the most common workflow for Gerrit). That potential command would just kick off an interactive rebase, and then copy over the review data to point at the resulting new commit.\r\n\r\nSimilarly, you could imagine a \"git appraise merge\" command that merges the current review onto the head of the target ref without submitting it (but no one has asked for such a thing).\r\n\r\nThe reason I went with \"submit\" was that it is a commonly used term for getting changes into a codebase (mostly in centralized source control systems like Subversion and Perforce), and that felt like a closer analog to what \"git appraise submit\" does than merge/rebase/etc."}

{"timestamp":"1456169392","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":206}},"description":"Yeah, you're right about that; referring to them as \"Analyses Results\" in the docs would be better than \"Robot Comments\".\r\n\r\nI should create a bug to update the docs accordingly."}

{"timestamp":"1456169605","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":257}},"description":"I was originally going to use \"comments\", but then worried that it was too similar to \"refs/notes/commits\" (the default notes ref), and would make it too easy for users (myself in particular) to make mistakes."}

{"timestamp":"1456170347","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":101}},"description":"That's a good point; only part of the review is stored in that ref, so it should have been more specific. I favor long names over short ones, so I would change that to \"review-requests\" rather than just \"requests\", but still it's a good point.\r\n\r\nUnfortunately, it's too late to change that for this version of the schema (it's a backwards-incompatible change), but if we ever have to make a backwards-incompatible change, then we should keep that in mind. That being said; I don't have any reason to believe that we will make such a change."}

{"timestamp":"1456171018","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":91}},"description":"I can see arguments on both sides of this. Yes, we could use something like \"refs/notes/git-appraise\" to remove ambiguity as to which tool \"owns\" those refs, but the flip side of that ambiguity is inclusiveness.\r\n\r\nI want other tools to feel encouraged to use the same formats, so that they all integrate in a loosely-coupled manner. I may be over thinking this, but \"refs/notes/devtools\" feels more welcoming to projects like GitLab, Gogs, or Jenkins."}

{"timestamp":"1456172013","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":66}},"description":"I'm going to have to mull this over a bit more.\r\n\r\nUsing the \"show\" command to print the diff is probably one of the least polished parts of the command line surface.\r\n\r\nIf we go with the -p/-u/--path flag, then we should also add a -s/--no-patch and make the default configurable. I'd also want to keep the --diff option so as to not break any scripts that have been written against the tool. Right now I'm leaning towards doing that, but I don't want to make a hasty decision about it.\r\n\r\nAnother thing I've wondered about is whether or not diff should be promoted to its own subcommand (e.g. \"git appraise diff\"). I can't decide whether or not that strikes the right balance between \"easy-to-use\" and \"small-CLI-surface\".\r\n\r\nI'll split this off into its own tracking issue."}

{"timestamp":"1456172203","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":58}},"description":"This sounds like a good change to me; I'll add a tracking issue for it."}

{"timestamp":"1456172634","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":58}},"description":"Created https://github.com/google/git-appraise/issues/42 to track this."}

{"timestamp":"1456172856","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":66}},"description":"Added https://github.com/google/git-appraise/issues/43 to track this."}

{"timestamp":"1456173478","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":206}},"description":"Added https://github.com/google/git-appraise/issues/44 to track that."}

{"timestamp":"1456173845","author":"ojarjur","description":"Thanks again for all of the feedback @andreineculau. I've gone through (I think) all of the inline comments and either created an issue to track the corresponding changes, or added a comment about why I don't think something will work.\r\n\r\nIf I missed anything, then please call that out.\r\n\r\nAs for the other tools named \"git-review\", Harry found the biggest one, but there is also a tool called [\"git-codereview\"](https://godoc.org/golang.org/x/review/git-codereview), and hundreds of smaller projects on github that use the name \"git-review\"."}

{"timestamp":"1456493263","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":66}},"description":"if you go with `git appraise diff`, what would that take as input? **one** hash? `git diff` takes a **range**"}

{"timestamp":"1456493347","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"\u003e I've actually been thinking of adding a \"git appraise rebase\" command that would not submit the review.\r\n\r\n:+1: much better than my initial suggestion"}

{"timestamp":"1456493596","author":"andreineculau","description":"Thanks for all the effort and time"}

{"timestamp":"1456493347","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"\u003e I've actually been thinking of adding a \"git appraise rebase\" command that would not submit the review.\r\n\r\n:+1: much better than my initial suggestion\r\n\r\nyou don't want an open issue on this?"}

{"timestamp":"1456501623","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":66}},"description":"Yes, it would just take the hash of the review. That's another reason I was hesitant to add a \"diff\" subcommand, but I don't think it should be a deal breaker."}

{"timestamp":"1456501686","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":79}},"description":"\u003e you don't want an open issue on this?\r\n\r\nThat's a good point; I should add a tracking issue for that (and will)."}

{"timestamp":"1456501915","author":"andreineculau","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":66}},"description":"having many ways to do the same thing is like the road to hell paved with good intentions"}

{"timestamp":"1456504316","author":"ojarjur","location":{"commit":"727f77500e5bd0c3578f7eae7b3834965e961911","path":"README.md","range":{"startLine":66}},"description":"\u003e having many ways to do the same thing is like the road to hell paved with good intentions\r\n\r\nI agree that is another downside to it; I'm still very much undecided about whether or not to make it into its own command."}

{"timestamp":"1455455932","author":"hazbo","description":"Hey @andreineculau,\n\nYou raise some interesting points here. I'm sure @ojarjur will be able to respond in more detail but I figured I'd weigh in here.\n\n\u003e to see no correlation, nor explanation, as to why this is called git-appraise, although we talk about reviews\n\nYour right, in terms of the docs and the code itself the term review is used, rather than appraise. \n\n`git-appraise` is simply just the name of the project and also the git command. However I find the words 'review' and 'appraise', under the given context, somewhat synonymous given that to appraise, is to \"assess the value or quality of\", which I find works quite nicely with this project as that is literally  the reason why someone would request a code review. Personally I prefer appraise over review as both the name of the project and the git command - that's just my opinion though ;)\n\n\u003e submitting vs merging/rebasing\n\nI'm not sure whether or not by this you mean; \"why would I use `git appraise submit 8cb887077783` as appose to `git merge`?\", or \"why isn't it `git appraise merge 8cb887077783` instead of `submit`?\". Either way they're both perfectly valid questions, so I'll answer both.\n\n1) `submit` is one subcommand that deals with both closing the code review (changing it from 'accepted'), and the way in which the code is actually merged. So with this subcommand you may use `--merge` or `--rebase` or `--fast-forward`, or you may configure this globally within the scope of your project. By default it will use fast-forward. If you're using `git-appraise` in any meaningful way, the submit command seems to make the most sense.\n\n2) Git already has merge and rebase subcommands. The focus there is on merging the code. The focus with git-appraise is to close (submit) the review along with the code. So rather than having 3 subcommands to submit the review we just use `submit` and optionally allow the flags at stated above.\n\nThese are just my opinions on two of the points you brought up. I hope this provides some insight. :)\n"}

{"timestamp":"1455456792","author":"andreineculau","description":"thanks @hazbo . I will sprinkle the diff with the questions, for you and @ojarjur, as it provides context e.g. I meant \"why git appraise submit --merge instead of git review merge?\"\n"}

{"timestamp":"1455573606","author":"hazbo","description":"@ojarjur it'd be interesting to hear your take on this PR.\n"}

{"timestamp":"1455595265","author":"ojarjur","description":"@andreineculau, thanks for the feedback and questions.\n\n@hazbo, thanks for weighing in.\n\nTo begin with, sorry it took me a while to respond; this was a long weekend for me, so I wasn't at my computer.\n\nThere's a lot of subtle issues around naming and I need to wait until next week before I can give all these questions the amount of thought they deserve. I'll come back with more in depth responses next week, but I did want to address the 'git-review' issue now:\n\nI originally did want to name the tool that, but there were multiple other tools already called that, so that name would not work. Using 'git-appraise' instead removes any ambiguity.\n\nI also thought about calling the reviews 'appraisals' in the docs, but since 'review' is already standard terminology, that would be confusing.\n\nIn essence, for the docs, widely used terms are better, but for the tool's name uniqueness is better.\n"}

{"timestamp":"1455651612","author":"andreineculau","description":"@ojarjur once again, take it easy :)\n\n\u003e but since 'review' is already standard terminology, that would be confusing.\n\nFWIW, while it is standard terminology, it is not a confined concept. Like \"fruit\" is standardized terminology, but both apples and pears fit the box. All in all, I'm more interested in the other suggestions, as `git review` can be a local alias.\n\n\u003e there were multiple other tools already called that\n\ncare to name/link them? **next week!** :) Thanks\n"}

{"timestamp":"1455976668","author":"hazbo","description":"Hi @andreineculau \n\nI just happened to come across this while reading about [Gerrit](https://www.gerritcodereview.com/), it's the code review system that the Go language itself uses. Apparently this relies on a program called [`git-review`](https://github.com/openstack-infra/git-review).\n\nInterestingly, while then reading about git-review, I saw this:\n\n\u003e The upstream project is led by OpenStack. Is not to be confused with the unrelated Facebook project.\n\nWhich took me to [this](https://github.com/facebookarchive/git-review). It appears this project is no longer worked on / used. Just figured I'd update this thread upon seeing this. :)\n"}

{"timestamp":"1456173845","author":"ojarjur","description":"Thanks again for all of the feedback @andreineculau. I've gone through (I think) all of the inline comments and either created an issue to track the corresponding changes, or added a comment about why I don't think something will work.\n\nIf I missed anything, then please call that out.\n\nAs for the other tools named \"git-review\", Harry found the biggest one, but there is also a tool called [\"git-codereview\"](https://godoc.org/golang.org/x/review/git-codereview), and hundreds of smaller projects on github that use the name \"git-review\".\n"}
