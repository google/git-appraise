{"timestamp":"1511410231","author":"ojarjur","description":"Thanks for the contribution!\r\n\r\nI've only had a chance to glance over the change so far, but it looks good. In particular, thanks for fixing the preexisting issues with the import orderings.\r\n\r\nI'll put together more detailed feedback early next week."}
{"timestamp":"1512176081","author":"ojarjur","description":"Sorry that it took me a while to get more detailed feedback on this, but overall I really like it.\r\n\r\nIn particular, you are right that line numbers should be treated as starting at 1; I like to think of the line number representing the number of lines that should be displayed before showing the comment, so a comment that should be displayed for the first line would have a start line of \"1\", while a comment with a start line of \"0\" should be displayed before any of the file contents.\r\n\r\nI also really like how you managed to make the flag for the new functionality consistent with the current behavior; someone wanting to just comment on a whole like can still do that with the exact same command, while someone wanting to specify a comment for a precise range has a concise way to do that.\r\n\r\nI'll leave more detailed feedback on the relevant lines of code; but overall I like it.\r\n\r\nThanks for the contribution!"}

{"timestamp":"1512176223","author":"ojarjur","location":{"commit":"58ae7dfd458d7b0046c79a1e4938c3a1b9246009","path":"commands/comment.go","range":{"startLine":71}},"description":"Since we are numbering lines starting at 1, we need to subtract 1 from location.StartLine before indexing into the lines slice.\r\n\r\nWe also need to do that below when checking the location.EndColumn field."}

{"timestamp":"1512176463","author":"ojarjur","location":{"commit":"58ae7dfd458d7b0046c79a1e4938c3a1b9246009","path":"review/comment/comment.go","range":{"startLine":41}},"description":"I think the `SL[+SC][:EL[+EC]]` description needs more explanation.\r\n\r\nMaybe add a qualifier at the end of the sentence like ``` where \"SL\" is the starting line, \"SC\" is the starting column, \"EL\" is the ending line, and \"EC\" is the ending column; with each number starting from 1.```"}

{"timestamp":"1512176649","author":"ojarjur","location":{"commit":"58ae7dfd458d7b0046c79a1e4938c3a1b9246009","path":"review/comment/comment.go","range":{"startLine":197}},"description":"It may be worthwhile to add a check here against providing a column number if the line number is 0.\r\n\r\nI.E. `1+10` is a valid range part, but `0+10` does not make any sense because line number 0 comes before any of the file contents."}

{"timestamp":"1512305116","author":"tcolgate","description":"@ojarjur I've pushed some updates. Also updated the appraise show output to display the full range if it has been specified"}

{"timestamp":"1512421061","author":"ojarjur","location":{"commit":"dadd50baca8ec0494ce49f59dfd69f9cc01bad44","path":"commands/output/output.go","range":{"startLine":112}},"description":"Optional feedback:\r\n\r\nThis check should probably also validate the end line before we try to display it; otherwise the tool would die when displaying a thread if any of the comments have invalid locations. The simplest approach would probably be to make `checkCommentLocation` into a method on the \"Location\" struct, so that here we can call something like `if err := comment.Location.Check(r.Repo); err != nil {`. We would then also do something similar in `commands/comment.go`\r\n\r\nThis is all optional as far as this change is concerned. If you want to throw that in, then feel free; otherwise I'll put something together as a cleanup later on."}

{"timestamp":"1512421124","author":"ojarjur","description":"Thanks, @tcolgate. This change looks great.\r\n\r\nSince the title starts with `[WIP]`, are there other things you wanted to get in before we merge this?"}

{"timestamp":"1512468852","author":"tcolgate","description":"The WIP was because (if I'm completely honest), I hadn't actually run the code at the point that I raised the original PR."}
