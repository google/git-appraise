{"timestamp":"1457460458","author":"ojarjur","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"First off, good catch on the upper-bound checking being wrong; it should use a \u003e rather than a \u003e=.\r\n\r\nThe lowerbound, however, needs to be a 0 rather than a 1, as leaving off the \"-l\" flag (i.e. commenting on the entire file) will result in the `line` variable having a value of 0, and that's a valid use case.\r\n\r\nThat being said, thanks for finding this issue and fixing it."}

{"timestamp":"1457484365","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"@ojarjur Sorry, I don't understand what you mean. -l can be taken from 1 to count of lines. So 1 to len(lines)."}

{"timestamp":"1457485030","author":"ojarjur","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"@mattn, sorry if I was not clear enough.\r\n\r\nZero is a valid value to pass to the `-l` flag. So, for instance:\r\n\r\n    git appraise comment -m test -f README.md -l 0 b2a042b3773555f73aef5a840289b3ca110612de\r\n\r\nis allowed, and is equivalent to (note the absence of the `-l` flag):\r\n\r\n    git appraise comment -m test -f README.md b2a042b3773555f73aef5a840289b3ca110612de\r\n\r\nWhen a user does that, they are commenting on the entire file rather than a single line in the file.\r\n\r\nThe `checkCommentLocation` method is called any time that the `-f` flag is specified, so if we added the lower bound check (`line \u003c 1...`), then these whole-file comments would no longer be allowed.\r\n\r\nThe `commentLine` variable is defined to be an unsigned int, and 0 is a valid value, so we do not need to perform any lower-bounds checking for it."}
