{"timestamp":"1658336120","author":"google-cla[bot]","description":"Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https://github.com/google/git-appraise/pull/113/checks?check_run_id=7434132409) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."}

{"timestamp":"1658337811","author":"iveqy","description":"For some reason this mess up the git-appraise list view where submitted code reviews will still be shown as open. IT tells me that there's more to this than just this merge request."}

{"timestamp":"1660166127","author":"ojarjur","description":"Hi @iveqy, thanks for taking the time and putting in the effort to contribute to the tool.\r\n\r\nAs you noted, there is more to what is going on than just the `IsAncestor` check.\r\n\r\nWhen you rebase the commits in a review outside of using the `git appraise rebase` command, then we lose any link between the original commit and the commit you are trying to submit.\r\n\r\nThat means that even if we disabled the `IsAncestor` check, the original review would not show up as being submitted, because git-appraise does not know the commits are related.\r\n\r\nThis can be fixed by running `git appraise rebase` prior to running `git appraise submit`, so maybe instead all we need to do is catch this scenario and give the user appropriate instructions.\r\n\r\nI'll add an inline comment giving an example of what I am thinking."}

{"timestamp":"1660166933","author":"ojarjur","location":{"commit":"047bb242285e7eeefdecc5fa64a28b5433c0f48a","path":"commands/submit.go","range":{"startLine":82}},"description":"We still want to use the result of `GetHeadCommit` in the below check. It will actually use the review ref head if the metadata linking the review commit to the review ref head is properly set up.\r\n\r\nHowever, we *also* want to give the user instructions on how to fix it if that metadata is not correct.\r\n\r\nI think a better fix might be to add logic right after this (right before we check the ancestry of the target ref) to double check that the metadata is correct and give the user instructions on how to fix it if it is not.\r\n\r\nSomething like:\r\n\r\n```go\r\n\tisReviewAssociatedWithRef, err := repo.IsAncestor(source, r.Request.ReviewRef)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif !isReviewAssociatedWithRef {\r\n\t\treturn fmt.Errorf(\"The review commit is not associated with the review ref %q. If the change has been rebased, then reassociate the review commit with the review ref using the command `git appraise rebase %s`\", r.Request.ReviewRef, r.Revision)\r\n\t}\r\n```"}
