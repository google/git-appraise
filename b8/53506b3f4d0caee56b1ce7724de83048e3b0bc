{"timestamp":"1643360688","author":"fatelei","description":"only support timestamp format"}

{"timestamp":"1646245887","author":"ojarjur","description":"Thanks so much for the contribution!\r\n\r\nI'm taking a look now and will have some feedback, but overall this looks like a big help."}

{"timestamp":"1646246764","author":"ojarjur","description":"Thanks again for the contribution!\r\n\r\nAside from not wanting to make backwards-incompatible changes to `comment.New` and `request.New`, this looks great!"}

{"timestamp":"1646246628","author":"ojarjur","location":{"commit":"b853506b3f4d0caee56b1ce7724de83048e3b0bc","path":"review/comment/comment.go","range":{"startLine":130}},"description":"With this change (and the corresponding one in the `request` package), any clients of the API outside of this repository might get broken (we haven't migrated to using go modules yet).\r\n\r\nI'm also wondering if the `New` methods actually provide any value in the case of the timestamp being explicitly provided (as opposed to clients manually creating the `Comment` struct).\r\n\r\nThe only benefit it seems to have is normalizing how a *time.Time object is converted to a timestamp.\r\n\r\nMaybe a better place for that formatting helper is inside of the new `commands/helper` package that you've created?\r\n\r\nI.E. the caller could invoke something like:\r\n\r\n```go\r\n\tdate, err := GetDate(*commentDate)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif date == nil {\r\n\t\tdate = time.Now().Unix()\r\n\t}\r\n\tts := FormatDate(date)\r\n\tc := comment.Comment{\r\n\t\tTimestamp: ts,\r\n\t\tAuthor: userEmail,\r\n\t\tDescription: *commentMessage\r\n\t}\r\n```\r\n\r\nAlternatively, we could keep the `New` call as-is and just conditionally populate the timestamp after (similarly to how we populate location, parent, etc...).\r\n\r\n```go\r\n\tc := comment.New(userEmail, *commentMessage)\r\n\tdate, err := GetDate(*commentDate)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif date != nil {\r\n\t\tc.Timestamp = FormatDate(date)\r\n\t}\r\n```\r\n\r\nI don't have a strong preference of one approach over the other, but the latter does look like it would be a (slightly) smaller change."}

{"timestamp":"1646322189","author":"fatelei","location":{"commit":"b853506b3f4d0caee56b1ce7724de83048e3b0bc","path":"review/comment/comment.go","range":{"startLine":130}},"description":"ok"}

{"timestamp":"1649090797","author":"ojarjur","location":{"commit":"386ef5f98ba545e3d4ab538473d186815d273834","path":"commands/comment.go","range":{"startLine":125}},"description":"This line needs to be reverted (the `date` argument to `comment.New` should be removed)."}

{"timestamp":"1649094778","author":"ojarjur","location":{"commit":"386ef5f98ba545e3d4ab538473d186815d273834","path":"commands/helper.go","range":{"startLine":18}},"description":"The `GIT_AUTHOR_DATE` and `GIT_COMMITTER_DATE` environment variables don't use this format (see [here](https://git-scm.com/docs/git-commit/2.24.0#_date_formats)).\r\n\r\nHowever, the format they do use is *really* convoluted, so I'd be happy to just change the error message to `Unsupported timestamp format` instead of `Invalid timestamp`.\r\n\r\nFWIW, if I am reading it right, then it looks like to fully match the git docs, we'd need to do the following:\r\n\r\n1. Allow an optional timezone offset for the numeric format.\r\n2. Use `time.Parse(time.RFC1123Z, timestampStr)` for the RFC 2822 format\r\n3. For the \"ISO 8601\" option, try (in order):\r\n    1. `time.Parse(time.RFC3339, timestampStr)` \r\n    2. `time.Parse(\"2005-04-07 22:13:13\", timestampStr)`\r\n    3. `time.Parse(\"2005.04.07T22:13:13\", timestampStr)`\r\n    4. `time.Parse(\"2005.04.07 22:13:13\", timestampStr)`\r\n    5. `time.Parse(\"04/07/2005T22:13:13\", timestampStr)`\r\n    6. `time.Parse(\"04/07/2005 22:13:13\", timestampStr)`\r\n    7. `time.Parse(\"07.04.2005T22:13:13\", timestampStr)`\r\n    8. `time.Parse(\"07.04.2005 22:13:13\", timestampStr)`\r\n\r\nI don't suspect that's really worth the additional code, so I'd be happy to just make the error message more clear that only a unix-seconds format is supported."}

{"timestamp":"1649174360","author":"fatelei","location":{"commit":"386ef5f98ba545e3d4ab538473d186815d273834","path":"commands/helper.go","range":{"startLine":18}},"description":"it's great"}

{"timestamp":"1649280989","author":"ojarjur","location":{"commit":"c33694795bb8aeb988f8f9f8d693fce46f796685","path":"commands/comment.go","range":{"startLine":118}},"description":"This doesn't build as-is.\r\n\r\nIt needs to return two values instead of one, so `return nil, err`"}
