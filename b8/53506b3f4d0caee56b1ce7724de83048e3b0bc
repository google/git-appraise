{"timestamp":"1643360688","author":"fatelei","description":"only support timestamp format"}

{"timestamp":"1646245887","author":"ojarjur","description":"Thanks so much for the contribution!\r\n\r\nI'm taking a look now and will have some feedback, but overall this looks like a big help."}

{"timestamp":"1646246764","author":"ojarjur","description":"Thanks again for the contribution!\r\n\r\nAside from not wanting to make backwards-incompatible changes to `comment.New` and `request.New`, this looks great!"}

{"timestamp":"1646246628","author":"ojarjur","location":{"commit":"b853506b3f4d0caee56b1ce7724de83048e3b0bc","path":"review/comment/comment.go","range":{"startLine":130}},"description":"With this change (and the corresponding one in the `request` package), any clients of the API outside of this repository might get broken (we haven't migrated to using go modules yet).\r\n\r\nI'm also wondering if the `New` methods actually provide any value in the case of the timestamp being explicitly provided (as opposed to clients manually creating the `Comment` struct).\r\n\r\nThe only benefit it seems to have is normalizing how a *time.Time object is converted to a timestamp.\r\n\r\nMaybe a better place for that formatting helper is inside of the new `commands/helper` package that you've created?\r\n\r\nI.E. the caller could invoke something like:\r\n\r\n```go\r\n\tdate, err := GetDate(*commentDate)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif date == nil {\r\n\t\tdate = time.Now().Unix()\r\n\t}\r\n\tts := FormatDate(date)\r\n\tc := comment.Comment{\r\n\t\tTimestamp: ts,\r\n\t\tAuthor: userEmail,\r\n\t\tDescription: *commentMessage\r\n\t}\r\n```\r\n\r\nAlternatively, we could keep the `New` call as-is and just conditionally populate the timestamp after (similarly to how we populate location, parent, etc...).\r\n\r\n```go\r\n\tc := comment.New(userEmail, *commentMessage)\r\n\tdate, err := GetDate(*commentDate)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif date != nil {\r\n\t\tc.Timestamp = FormatDate(date)\r\n\t}\r\n```\r\n\r\nI don't have a strong preference of one approach over the other, but the latter does look like it would be a (slightly) smaller change."}
