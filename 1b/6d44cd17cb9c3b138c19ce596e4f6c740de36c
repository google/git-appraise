{"timestamp":"1457460458","author":"ojarjur","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"First off, good catch on the upper-bound checking being wrong; it should use a \u003e rather than a \u003e=.\r\n\r\nThe lowerbound, however, needs to be a 0 rather than a 1, as leaving off the \"-l\" flag (i.e. commenting on the entire file) will result in the `line` variable having a value of 0, and that's a valid use case.\r\n\r\nThat being said, thanks for finding this issue and fixing it."}
{"timestamp":"1457484365","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"@ojarjur Sorry, I don't understand what you mean. -l can be taken from 1 to count of lines. So 1 to len(lines)."}
{"timestamp":"1457485030","author":"ojarjur","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"@mattn, sorry if I was not clear enough.\r\n\r\nZero is a valid value to pass to the `-l` flag. So, for instance:\r\n\r\n    git appraise comment -m test -f README.md -l 0 b2a042b3773555f73aef5a840289b3ca110612de\r\n\r\nis allowed, and is equivalent to (note the absence of the `-l` flag):\r\n\r\n    git appraise comment -m test -f README.md b2a042b3773555f73aef5a840289b3ca110612de\r\n\r\nWhen a user does that, they are commenting on the entire file rather than a single line in the file.\r\n\r\nThe `checkCommentLocation` method is called any time that the `-f` flag is specified, so if we added the lower bound check (`line \u003c 1...`), then these whole-file comments would no longer be allowed.\r\n\r\nThe `commentLine` variable is defined to be an unsigned int, and 0 is a valid value, so we do not need to perform any lower-bounds checking for it."}
{"timestamp":"1457485916","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"Okay, will fix to be as your said. :)"}
{"timestamp":"1457486106","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"Is this your expected?\r\n```go\r\nfunc checkCommentLocation(repo repository.Repo, commit, file string, line uint) error {\r\n\tcontents, err := repo.Show(commit, file)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tlines := strings.Split(contents, \"\\n\")\r\n\tif line \u003c 0 || line \u003e= uint(len(lines)) {\r\n\t\treturn fmt.Errorf(\"Line number %d does not exist in file %q\", line, file)\r\n\t}\r\n\treturn nil\r\n}\r\n```"}
{"timestamp":"1457486106","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"\u003cdel\u003e\r\nIs this your expected?\r\n```go\r\nfunc checkCommentLocation(repo repository.Repo, commit, file string, line uint) error {\r\n\tcontents, err := repo.Show(commit, file)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tlines := strings.Split(contents, \"\\n\")\r\n\tif line \u003c 0 || line \u003e= uint(len(lines)) {\r\n\t\treturn fmt.Errorf(\"Line number %d does not exist in file %q\", line, file)\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\n\u003c/del\u003e"}
{"timestamp":"1457486436","author":"ojarjur","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"I actually meant something like:\r\n\r\n    if line \u003e uint(len(lines)) {\r\n\r\nI.E. You are absolutely right that the check against the number of lines should be `\u003e` rather than `\u003e=`, but there's no need to check that the line is non-negative, as the flag library should not allow that anyway."}
{"timestamp":"1457487419","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"Ah, I just notice line is uint. Sorry, will fix soon."}
{"timestamp":"1457487715","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"Fixed \u0026 Squashed."}
{"timestamp":"1457556748","author":"ojarjur@google.com","location":{"commit":"1b6d44cd17cb9c3b138c19ce596e4f6c740de36c"},"resolved":true}

{"timestamp":"1457460458","author":"ojarjur","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"First off, good catch on the upper-bound checking being wrong; it should use a \u003e rather than a \u003e=.\n\nThe lowerbound, however, needs to be a 0 rather than a 1, as leaving off the \"-l\" flag (i.e. commenting on the entire file) will result in the `line` variable having a value of 0, and that's a valid use case.\n\nThat being said, thanks for finding this issue and fixing it.\n"}

{"timestamp":"1457484365","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"@ojarjur Sorry, I don't understand what you mean. -l can be taken from 1 to count of lines. So 1 to len(lines).\n"}

{"timestamp":"1457485030","author":"ojarjur","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"@mattn, sorry if I was not clear enough.\n\nZero is a valid value to pass to the `-l` flag. So, for instance:\n\n```\ngit appraise comment -m test -f README.md -l 0 b2a042b3773555f73aef5a840289b3ca110612de\n```\n\nis allowed, and is equivalent to (note the absence of the `-l` flag):\n\n```\ngit appraise comment -m test -f README.md b2a042b3773555f73aef5a840289b3ca110612de\n```\n\nWhen a user does that, they are commenting on the entire file rather than a single line in the file.\n\nThe `checkCommentLocation` method is called any time that the `-f` flag is specified, so if we added the lower bound check (`line \u003c 1...`), then these whole-file comments would no longer be allowed.\n\nThe `commentLine` variable is defined to be an unsigned int, and 0 is a valid value, so we do not need to perform any lower-bounds checking for it.\n"}

{"timestamp":"1457485916","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"Okay, will fix to be as your said. :)\n"}

{"timestamp":"1457486106","author":"mattn","location":{"commit":"de9ebcdf2a1e93365eefc2739f73f2c68a280c11","path":"commands/comment.go","range":{"startLine":62}},"description":"\u003cdel\u003e\nIs this your expected?\n```go\nfunc checkCommentLocation(repo repository.Repo, commit, file string, line uint) error {\n    contents, err := repo.Show(commit, file)\n    if err != nil {\n        return err\n    }\n    lines := strings.Split(contents, \"\\n\")\n    if line \u003c 0 || line \u003e= uint(len(lines)) {\n        return fmt.Errorf(\"Line number %d does not exist in file %q\", line, file)\n    }\n    return nil\n}\n```\n\u003c/del\u003e\n"}
