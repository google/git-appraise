{"timestamp":"1453990916","author":"jishi9","description":"I noticed that the submit command will fail silently (exit status 1, but no error message) if the config key `appraise.submit` doesn't exist or was set to a bad value (other than \"merge\" or \"rebase\"). I arrived at this state by running these commands on a branch:\r\n```\r\ngit appraise request\r\ngit appraise comment -lgtm\r\ngit appraise submit \r\n```\r\n\r\nI think the reason no error message is being displayed is because `git config` doesn't display an error message for a missing config key.\r\n\r\nWe will need to check the exit code of `git config`; according to the docs, an exit code of 1 for `git config` means \"the section or key is invalid\".\r\n\r\nWe also need to check that that the retrieved config value is one of 'merge' or 'rebase'"}

{"timestamp":"1453991486","author":"jishi9","description":"That's interesting.. you can't properly get the exit code :(\r\nhttp://stackoverflow.com/questions/10385551/get-exit-code-go"}

{"timestamp":"1453991486","author":"jishi9","description":"That's interesting.. mixed opinions on whether you can get the exit code :(\r\nhttp://stackoverflow.com/questions/10385551/get-exit-code-go"}

{"timestamp":"1453996517","author":"hazbo","description":"I came up with something like this, so instead of:\r\n\r\n```\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\treturn repo.runGitCommand(\"config\", \"appraise.submit\")\r\n}\r\n```\r\n\r\nwould this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work:\r\n\r\n```\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\tmergeStrategy, err := repo.runGitCommand(\"config\", \"appraise.submit\")\r\n\tif err != nil \u0026\u0026 mergeStrategy == \"\" {\r\n\t\treturn \"\", nil\r\n\t} else if err != nil {\r\n\t\treturn mergeStrategy, err\r\n\t}\r\n\treturn mergeStrategy, nil\r\n}\r\n```\r\n\r\nThoughts?"}

{"timestamp":"1453996517","author":"hazbo","description":"I came up with something like this, so instead of:\r\n\r\n```go\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\treturn repo.runGitCommand(\"config\", \"appraise.submit\")\r\n}\r\n```\r\n\r\nwould this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work:\r\n\r\n```go\r\n// GetMergeStrategy returns the way in which a submitted review is merged\r\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\r\n\tmergeStrategy, err := repo.runGitCommand(\"config\", \"appraise.submit\")\r\n\tif err != nil \u0026\u0026 mergeStrategy == \"\" {\r\n\t\treturn \"\", nil\r\n\t} else if err != nil {\r\n\t\treturn mergeStrategy, err\r\n\t}\r\n\treturn mergeStrategy, nil\r\n}\r\n```\r\n\r\nThoughts?"}

{"timestamp":"1453996857","author":"hazbo","description":"The reason I'd suggest ignoring the error (providing it comes with an empty string in this case) is that I'd assume we'd still want to to just fall back to the default (merge in this case) if the user has not specified via git config what this will be."}

{"timestamp":"1453998871","author":"jishi9","description":"\u003e would this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work\r\n\r\nI think that would work, though I'm concerned that we're treating all errors arising from the `git config` command as meaning \"the key doesn't exist\". `man git-config` lists a surprising number of possible exit codes :)\r\n\r\n        This command will fail with non-zero status upon error. Some exit codes are:\r\n         1. The config file is invalid (ret=3),\r\n         2. can not write to the config file (ret=4),\r\n         3. no section or name was provided (ret=2),\r\n         4. the section or key is invalid (ret=1),\r\n         5. you try to unset an option which does not exist (ret=5),\r\n         6. you try to unset/set an option for which multiple lines match (ret=5), or\r\n         7. you try to use an invalid regexp (ret=6).\r\n        On success, the command returns the exit code 0.\r\n\r\n\r\n\u003e I'd assume we'd still want to to just fall back to the default (merge in this case) if the user has not specified via git config what this will be\r\n\r\nThat makes sense. I'm thinking of writing a `getGitConfig` function that allows for an 'optional' return type, or maybe a default value.\r\n\r\nSee also my pull request #37 , if you patch that change in your branch and try the `submit` command then a clearer error message is displayed."}

{"timestamp":"1453999564","author":"hazbo","description":"I agree, I think a `getGitConfig` abstraction is a good idea, as we currently use this to get the email, text editor and (hopefully soon) the merge strategy (which may actually be better named, submit strategy).\r\n\r\nThis way we're in a safer position for all counts of `git config` being ran. I'll merge your patch into my branch and give this a quick test."}

{"timestamp":"1453999868","author":"googlebot","description":"We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n\n\u003c!-- need_author_consent --\u003e"}

{"timestamp":"1454009569","author":"ojarjur@google.com","location":{"commit":"b62fbba842a7c4b751c37cf640885029103da297","path":"commands/submit.go","range":{"startLine":93}},"description":"This should only be done if the user has not set one of the command line flags.\n\nFor instance, if you run `git appraise submit --rebase`, and your config has\nset `appraise.submit=merge` then the --rebase flag should take precendence.\n\nIn fact, I think the tool shouldn't even try to look at the config values if\nany of the flags have been set to true.\n\nSo, we should wrap this chunk of code in an if block along the lines of:\n\n```go\n\tif !(*submitRebase || *submitMerge) {\n\t\tmergeStrategy, _ := repo.GetMergeStrategy()\n\t\tif mergeStrategy == \"merge\" {\n\t\t\t*submitMerge = true\n\t\t}\n\t\tif mergeStrategy == \"rebase\" {\n\t\t\t*submitRebase = true\n\t\t}\n\t}\n```\n"}

{"timestamp":"1454010234","author":"ojarjur","description":"First off, thanks for putting this together, @hazbo. Also, thanks @jishi9 for the input.\r\n\r\nMy thoughts on the questions brought up so far:\r\n\r\n1. Having a getGitConfig method might be valuable, but there are also arguments against it, as every time we call \"git config\" we want to handle the absence of a config value differently (throwing an error, falling back to an environment variable, or falling back to a default). As is, I don't feel strongly about it.\r\n\r\n2. \"GetSubmitStrategy\" is a better name than \"GetMergeStrategy\", but I wouldn't block this review based on it.\r\n\r\n3. If an error is returned from \"git config\", then ignoring the actual contents of the error seems acceptable in this case.\r\n\r\n    This is because, in this context, none of the error codes *should* be possible except for `1` (unknown section) and `3` (invalid file). The `1` status code is basically what we expect, so ignoring it is what we would do anyway. The `3` status code means that the user's setup is broken in some way. Ideally we would report that to them, but it's a major type of breakage so hopefully the user will be made aware of that via other means. Further, it isn't something that we can do cleanly. These two things add up to make me think that the additional complexity (and, thus, brittleness) that would add to the code are not worth the additional user benefit that we would get from checking the error.\r\n\r\n    As such, my advice is to just check if there *is* an error of any sort, and if so fall back to the default.\r\n\r\nBTW, the default isn't \"merge\", it's fast-forward. Before closing #36, we'll also need to add a \"submitFastForward\" flag to be able to selectively choose that default even if a different strategy has been set in the config, but that just blocks the feature request, not this pull request.\r\n\r\nAlso, I've added an inline comment; take a look using `git appraise show`."}

{"timestamp":"1454094716","author":"ojarjur@google.com","location":{"commit":"0da50f2f6b320720e3f186c58b789f413987c01f"},"resolved":true}

{"timestamp":"1454017808","author":"googlebot","description":"CLAs look good, thanks!\n\n\u003c!-- ok --\u003e"}

{"timestamp":"1454065126","author":"hazbo","description":"@ojarjur thanks for the feedback on this. As you can see I have made some amendments in my latest commit. However I was unable to find your inline comment using git-appraise this time. I did a pull and then a list, but didn't see the review there."}

{"timestamp":"1454066246","author":"jishi9","description":"@hazbo It's hidden in `git appraise show 708d7c2846d8`, took me a while to find!\r\n\r\nLook for `a35b23b2737594d793d42b7ede04b8f068145384` in the output, where it says \"This should only be done if the user has not set one of the command line flags\"\r\n\r\n"}

{"timestamp":"1454066485","author":"hazbo","description":"@jishi9 thanks a lot! :)"}

{"timestamp":"1454095133","author":"ojarjur","description":"@hazbo @jishi9 OK, I see what happened with the comment disappearing; it was a bug in the script to mirror pull requests into git-appraise.\r\n\r\nApparently when the base moved forward, that tool thought it should create a new review, instead of just detecting the existing review.\r\n\r\nI've turned off the script for now, will fix the bug, and then turn it back on.\r\n\r\nSorry for the confusion."}

{"timestamp":"1453990916","author":"jishi9","description":"I noticed that the submit command will fail silently (exit status 1, but no error message) if the config key `appraise.submit` doesn't exist or was set to a bad value (other than \"merge\" or \"rebase\"). I arrived at this state by running these commands on a branch:\n\n```\ngit appraise request\ngit appraise comment -lgtm\ngit appraise submit \n```\n\nI think the reason no error message is being displayed is because `git config` doesn't display an error message for a missing config key.\n\nWe will need to check the exit code of `git config`; according to the docs, an exit code of 1 for `git config` means \"the section or key is invalid\".\n\nWe also need to check that that the retrieved config value is one of 'merge' or 'rebase'\n"}

{"timestamp":"1453991486","author":"jishi9","description":"That's interesting.. mixed opinions on whether you can get the exit code :(\nhttp://stackoverflow.com/questions/10385551/get-exit-code-go\n"}

{"timestamp":"1453996517","author":"hazbo","description":"I came up with something like this, so instead of:\n\n``` go\n// GetMergeStrategy returns the way in which a submitted review is merged\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\n    return repo.runGitCommand(\"config\", \"appraise.submit\")\n}\n```\n\nwould this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work:\n\n``` go\n// GetMergeStrategy returns the way in which a submitted review is merged\nfunc (repo *GitRepo) GetMergeStrategy() (string, error) {\n    mergeStrategy, err := repo.runGitCommand(\"config\", \"appraise.submit\")\n    if err != nil \u0026\u0026 mergeStrategy == \"\" {\n        return \"\", nil\n    } else if err != nil {\n        return mergeStrategy, err\n    }\n    return mergeStrategy, nil\n}\n```\n\nThoughts?\n"}

{"timestamp":"1453996857","author":"hazbo","description":"The reason I'd suggest ignoring the error (providing it comes with an empty string in this case) is that I'd assume we'd still want to to just fall back to the default (merge in this case) if the user has not specified via git config what this will be.\n"}

{"timestamp":"1453998871","author":"jishi9","description":"\u003e would this (although it may seem a little strange as we're essentially avoiding the error if the message is blank in this particular instance) work\n\nI think that would work, though I'm concerned that we're treating all errors arising from the `git config` command as meaning \"the key doesn't exist\". `man git-config` lists a surprising number of possible exit codes :)\n\n```\n    This command will fail with non-zero status upon error. Some exit codes are:\n     1. The config file is invalid (ret=3),\n     2. can not write to the config file (ret=4),\n     3. no section or name was provided (ret=2),\n     4. the section or key is invalid (ret=1),\n     5. you try to unset an option which does not exist (ret=5),\n     6. you try to unset/set an option for which multiple lines match (ret=5), or\n     7. you try to use an invalid regexp (ret=6).\n    On success, the command returns the exit code 0.\n```\n\n\u003e I'd assume we'd still want to to just fall back to the default (merge in this case) if the user has not specified via git config what this will be\n\nThat makes sense. I'm thinking of writing a `getGitConfig` function that allows for an 'optional' return type, or maybe a default value.\n\nSee also my pull request #37 , if you patch that change in your branch and try the `submit` command then a clearer error message is displayed.\n"}

{"timestamp":"1453999564","author":"hazbo","description":"I agree, I think a `getGitConfig` abstraction is a good idea, as we currently use this to get the email, text editor and (hopefully soon) the merge strategy (which may actually be better named, submit strategy).\n\nThis way we're in a safer position for all counts of `git config` being ran. I'll merge your patch into my branch and give this a quick test.\n"}

{"timestamp":"1453999868","author":"googlebot","description":"We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n\n\u003c!-- need_author_consent --\u003e\n"}

{"timestamp":"1454010234","author":"ojarjur","description":"First off, thanks for putting this together, @hazbo. Also, thanks @jishi9 for the input.\n\nMy thoughts on the questions brought up so far:\n1. Having a getGitConfig method might be valuable, but there are also arguments against it, as every time we call \"git config\" we want to handle the absence of a config value differently (throwing an error, falling back to an environment variable, or falling back to a default). As is, I don't feel strongly about it.\n2. \"GetSubmitStrategy\" is a better name than \"GetMergeStrategy\", but I wouldn't block this review based on it.\n3. If an error is returned from \"git config\", then ignoring the actual contents of the error seems acceptable in this case.\n   \n   This is because, in this context, none of the error codes _should_ be possible except for `1` (unknown section) and `3` (invalid file). The `1` status code is basically what we expect, so ignoring it is what we would do anyway. The `3` status code means that the user's setup is broken in some way. Ideally we would report that to them, but it's a major type of breakage so hopefully the user will be made aware of that via other means. Further, it isn't something that we can do cleanly. These two things add up to make me think that the additional complexity (and, thus, brittleness) that would add to the code are not worth the additional user benefit that we would get from checking the error.\n   \n   As such, my advice is to just check if there _is_ an error of any sort, and if so fall back to the default.\n\nBTW, the default isn't \"merge\", it's fast-forward. Before closing #36, we'll also need to add a \"submitFastForward\" flag to be able to selectively choose that default even if a different strategy has been set in the config, but that just blocks the feature request, not this pull request.\n\nAlso, I've added an inline comment; take a look using `git appraise show`.\n"}

{"timestamp":"1454017808","author":"googlebot","description":"CLAs look good, thanks!\n\n\u003c!-- ok --\u003e\n"}

{"timestamp":"1454065126","author":"hazbo","description":"@ojarjur thanks for the feedback on this. As you can see I have made some amendments in my latest commit. However I was unable to find your inline comment using git-appraise this time. I did a pull and then a list, but didn't see the review there.\n"}

{"timestamp":"1454066246","author":"jishi9","description":"@hazbo It's hidden in `git appraise show 708d7c2846d8`, took me a while to find!\n\nLook for `a35b23b2737594d793d42b7ede04b8f068145384` in the output, where it says \"This should only be done if the user has not set one of the command line flags\"\n"}

{"timestamp":"1454066485","author":"hazbo","description":"@jishi9 thanks a lot! :)\n"}

{"timestamp":"1454095133","author":"ojarjur","description":"@hazbo @jishi9 OK, I see what happened with the comment disappearing; it was a bug in the script to mirror pull requests into git-appraise.\n\nApparently when the base moved forward, that tool thought it should create a new review, instead of just detecting the existing review.\n\nI've turned off the script for now, will fix the bug, and then turn it back on.\n\nSorry for the confusion.\n"}
