{"timestamp":"1540249275","author":"googlebot","description":"\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit \u003chttps://cla.developers.google.com/\u003e to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u003c!-- need_sender_cla --\u003e"}

{"timestamp":"1540249726","author":"pittma","description":"CLA signed."}

{"timestamp":"1540249728","author":"googlebot","description":"CLAs look good, thanks!\n\n\u003c!-- ok --\u003e"}

{"timestamp":"1540339224","author":"ojarjur","description":"@pittma Thanks for taking this on!\r\n\r\nIt will take me some time to go through the full change, but I plan to give you feedback by the end of the week."}

{"timestamp":"1540861036","author":"ojarjur","location":{"commit":"a632af3b751f954b23525a7ea6bfd82ac80a6e6d","path":"review/gpg/signable.go","range":{"startLine":35}},"description":"Minor typo here: This should say \"review/request.go\" instead of \"review/equest.go\""}

{"timestamp":"1540861364","author":"ojarjur","location":{"commit":"a632af3b751f954b23525a7ea6bfd82ac80a6e6d","path":"review/gpg/signable.go","range":{"startLine":81}},"description":"I think maybe we should add a defer statement here to set the value of `*sigPtr` back to `sig` prior to the method returning."}

{"timestamp":"1540861448","author":"ojarjur","location":{"commit":"a632af3b751f954b23525a7ea6bfd82ac80a6e6d","path":"repository/repo.go","range":{"startLine":196}},"description":"I wonder if we should split this in to two separate methods; `MergeNotes` and `MergeArchives`. The reason is that we will soon want to add something like `MergeForks`, and maybe even `MergeKeys`, and we don't want to have to combine all of those together into a single method name."}

{"timestamp":"1541092394","author":"pittma","location":{"commit":"a632af3b751f954b23525a7ea6bfd82ac80a6e6d","path":"review/gpg/signable.go","range":{"startLine":81}},"description":"Whew. Seriously good point :smile:."}

{"timestamp":"1541191712","author":"ojarjur","location":{"commit":"fe1cb670a7c65902a658a60f86a709d6cd2f5733","path":"repository/git.go","range":{"startLine":877}},"description":"I tried this command and it shows the object names with slashes (git-notes can be divided into subdirectories with the path parts taken from the SHA1 hash of the noted object).\r\n\r\nI think we need to remove the slashes from all of the strings in the slice before returning."}

{"timestamp":"1541193600","author":"ojarjur","location":{"commit":"fe1cb670a7c65902a658a60f86a709d6cd2f5733","path":"repository/git.go","range":{"startLine":899}},"description":"I really like this approach for finding what notes have changed, but I think we also need to drop any slashes from the result."}

{"timestamp":"1541194550","author":"ojarjur","location":{"commit":"fe1cb670a7c65902a658a60f86a709d6cd2f5733","path":"repository/git.go","range":{"startLine":858}},"description":"Sorry that I didn't catch this before, but I think we are missing one scenario here.\r\n\r\nSpecifically, I think this will not return reviews which previously existed, but for which there are new comments.\r\n\r\nI.E. the new review requests are accounted for, but not the new review comments.\r\n\r\nI think the only change that is needed to account for that is to duplicate the `ls-tree` or `diff` command for the 'refs/notes/\u003cremote\u003e/devtools/discuss' ref, and then merge that list with the list for the review requests."}

{"timestamp":"1541195374","author":"ojarjur","location":{"commit":"fe1cb670a7c65902a658a60f86a709d6cd2f5733","path":"repository/repo.go","range":{"startLine":125}},"description":"Sorry that I didn't notice this earlier, but this (and the `RebaseRef` change below) is a change to the public API.\r\n\r\nI can't find any external references to this on public GitHub, but not all potential client code lives there.\r\n\r\nWe should define new methods that either take the sign argument, or unconditionally sign the commits."}

{"timestamp":"1541195565","author":"ojarjur","location":{"commit":"fe1cb670a7c65902a658a60f86a709d6cd2f5733","path":"review/review.go","range":{"startLine":173}},"description":"Let's wrap this error with a message explaining which comment could not be verified.\r\n\r\nOtherwise, the user will not know how to act on the error message they see."}

{"timestamp":"1541197922","author":"ojarjur","location":{"commit":"fe1cb670a7c65902a658a60f86a709d6cd2f5733","path":"review/review.go","range":{"startLine":354}},"description":"I think we need to verify the review request too."}

{"timestamp":"1541198411","author":"ojarjur","location":{"commit":"fe1cb670a7c65902a658a60f86a709d6cd2f5733","path":"review/gpg/signable.go","range":{"startLine":75}},"description":"Is \"key\" required here? I haven't used gpg yet so my knowledge of it is very superficial, but it looks like the `--verify` command just takes the document and the signature.\r\n\r\nThis is important as the key we have is the user's key, but the requests/comments will be signed by other users."}
