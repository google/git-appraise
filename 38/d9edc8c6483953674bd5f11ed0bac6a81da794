{"timestamp":"1588631863","author":"KoopaKing","location":{"commit":"07aa6b7df882e58da3ab315578fc8524c8d87a7a","path":"repository/git.go","range":{"startLine":269}},"description":"You don't need to fix this here, but the lambda closure of `err` is a bit sketchy for this `show` function with it being selectively checked."}

{"timestamp":"1588712183","author":"KoopaKing","location":{"commit":"07aa6b7df882e58da3ab315578fc8524c8d87a7a","path":"repository/git.go","range":{"startLine":516}},"description":"Maybe I just haven't read Blob yet, but it seems strange to trust the `savedHash` for a potentially mutable blob. This must assume that either:\r\n 1) `Blob` objects in this library are immutable\r\n 2) `Blob` objects properly recompute the `savedHash` if the `Contents` change\r\n 3) `Blob` objects properly unset the `savedHash` when `Contents` change and using this function sets `savedHash`\r\n\r\nEither way it makes this method's interface a bit strange (to me at least). If we are not setting `b.savedHash`, but are returning the correct hash that `b` was stored with, that seems to indicate that the user is responsible for setting `savedHash` themselves, which seems counterintuitive given the above assumptions about immutability or compute-on-change."}
